{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initState","request","XMLHttpRequest","open","send","jsonResponseText","responseText","vendors","JSON","parse","state","selectedVendorIndex","selectedJdkIndex","event","target","value","setState","document","getElementById","select","execCommand","preventDefault","productOptionArray","forEach","element","index","name","organization","product","currOption","react_default","a","createElement","key","push","selectedVendor","jdksOptionArray","jdks","version","selectedJdk","downloadJDKHref","jreIncludedModules","moduleString","length","productName","jreFolderName","toLowerCase","replace","jlinkCommand","onChange","handleProductChange","bind","handleJdkChange","href","id","readOnly","cols","rows","onClick","handleJlinkCommandTextareaClick","handleCopyButtonClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d8e8c9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initState();\n  }\n\n  initState() {\n    // Load vendors from JSON file\n    let jsonUrl =\n      \"https://raw.githubusercontent.com/justinmahar/create-openjdk-jre-with-jlink/master/src/json/vendors.json\";\n    let request = new XMLHttpRequest();\n    request.open(\"GET\", jsonUrl, false);\n    request.send(null);\n    let jsonResponseText = request.responseText;\n    let vendors = JSON.parse(jsonResponseText);\n\n    let selectedVendorIndex = 0;\n    let selectedJdkIndex = 0;\n\n    this.state = {\n      vendors: vendors.vendors,\n      selectedVendorIndex: selectedVendorIndex,\n      selectedJdkIndex: selectedJdkIndex\n    };\n  }\n\n  handleProductChange(event) {\n    let selectedVendorIndex = event.target.value;\n    this.setState({\n      selectedVendorIndex: selectedVendorIndex,\n      selectedJdkIndex: 0\n    });\n  }\n\n  handleJdkChange(event) {\n    let selectedJdkIndex = event.target.value;\n    this.setState({\n      selectedJdkIndex: selectedJdkIndex\n    });\n  }\n\n  handleCopyButtonClick(event) {\n    let commandTextarea = document.getElementById(\"jlink-command-textarea\");\n    commandTextarea.select();\n    document.execCommand(\"copy\");\n    event.preventDefault();\n  }\n\n  handleJlinkCommandTextareaClick(event) {\n    event.target.select();\n  }\n\n  render() {\n    let productOptionArray = [];\n\n    this.state.vendors.forEach((element, index) => {\n      let name = element.organization + \" \" + element.product;\n      let currOption = (\n        <option value={index} key={index}>\n          {name}\n        </option>\n      );\n      productOptionArray.push(currOption);\n    });\n\n    let selectedVendor = this.state.vendors[this.state.selectedVendorIndex];\n\n    let jdksOptionArray = [];\n\n    selectedVendor.jdks.forEach((element, index) => {\n      let name = \"JDK \" + element.version;\n      let currOption = (\n        <option value={index} key={index}>\n          {name}\n        </option>\n      );\n      jdksOptionArray.push(currOption);\n    });\n\n    let selectedJdk = selectedVendor.jdks[this.state.selectedJdkIndex];\n\n    let downloadJDKHref = selectedJdk[\"jdk_download_link\"];\n\n    let jreIncludedModules = selectedJdk[\"jre_included_modules\"];\n\n    let moduleString = \"\";\n\n    jreIncludedModules.forEach((element, index) => {\n      moduleString += element;\n      if (index < jreIncludedModules.length - 1) {\n        moduleString += \",\";\n      }\n    });\n\n    let productName =\n      selectedVendor.organization + \" \" + selectedVendor.product;\n\n    let jreFolderName =\n      \"jre-\" +\n      selectedJdk.version +\n      \"-\" +\n      productName.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\n\n    let jlinkCommand =\n      \".\\\\jlink --output \" +\n      jreFolderName +\n      \" --compress=2 --no-header-files --no-man-pages --module-path ..\\\\jmods --add-modules \" +\n      moduleString;\n\n    return (\n      <div>\n        <header>\n          <h3>Select your JDK:</h3>\n          <select onChange={this.handleProductChange.bind(this)}>\n            {productOptionArray}\n          </select>\n          <select onChange={this.handleJdkChange.bind(this)}>\n            {jdksOptionArray}\n          </select>{\" \"}\n          <a href={downloadJDKHref} target=\"_new\">\n            Download JDK &raquo;\n          </a>\n          <h3>\n            Create an OpenJDK{\" \"}\n            {selectedVendor.organization + \" \" + selectedVendor.product} JRE{\" \"}\n            {selectedJdk.version} using the <code>jlink</code> command below:\n          </h3>\n          <textarea\n            id=\"jlink-command-textarea\"\n            value={jlinkCommand}\n            readOnly\n            cols=\"80\"\n            rows=\"8\"\n            onClick={this.handleJlinkCommandTextareaClick}\n          />\n          <button onClick={this.handleCopyButtonClick.bind(this)}>Copy</button>\n          <p>Three easy steps:</p>\n          <ol>\n            <li>\n              Download and unpack{\" \"}\n              <a href={downloadJDKHref} target=\"_new\">\n                {selectedVendor.organization} {selectedVendor.product} JDK{\" \"}\n                {selectedJdk.version}\n              </a>\n              .\n            </li>\n            <li>\n              <a href=\"#0\" onClick={this.handleCopyButtonClick.bind(this)}>\n                Copy\n              </a>{\" \"}\n              the above <code>jlink</code> command and run it in the <code>bin</code>{\" \"}\n              directory of {selectedVendor.organization}{\" \"}\n              {selectedVendor.product} JDK {selectedJdk.version}.\n            </li>\n            <li>\n              Grab your JRE, which is in <code>bin\\{jreFolderName}</code>{\" \"}.\n            </li>\n          </ol>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}